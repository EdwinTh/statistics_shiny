source("funcs.R")
source("distribution_overlap.R")
function(input, output, session) {

  output$data_entry <- reactive({
    input$data_entry_method
  })

  input_vals <- reactive({
    if (input$data_entry_method == "1") {
      update_input_values(input$cases, input$noncases, 
                          input$cases2, input$noncases2)
    } else {
      update_input_values(n = input$n, prop = input$prop,
                          n2 = input$n2, prop2 = input$prop2)
    }
  })
  
  pars <- reactive({
    list(alpha1 = input_vals()$cases + 1, 
         beta1  = input_vals()$noncases + 1,
         alpha2 = input_vals()$cases2 + 1,
         beta2  = input_vals()$noncases2 + 1)
  })

  output$density <- renderPlotly(
    plot_proportion(pars()$alpha1, pars()$beta1, pars()$alpha2, pars()$beta2, "density")
  )

  output$distribution <- renderPlotly(
    plot_proportion(pars()$alpha1, pars()$beta1, pars()$alpha2, pars()$beta2, "distribution")
  )

  output$low <- renderText(
    calculate_ci(pars()$alpha1, pars()$beta1, input$ci)[1] %>%
      paste("Lower bound:", .)
  )

  output$midpoint <- renderText(
    calculate_ci(pars()$alpha1, pars()$beta1, input$ci)[2] %>%
      paste("Mid point:", .)
  )

  output$upper <- renderText(
    calculate_ci(pars()$alpha1, pars()$beta1, input$ci)[3] %>%
      paste("Upper bound:", .)
  )

  output$deviation <- renderText({
    ci_points <- calculate_ci(pars()$alpha1, pars()$beta1, input$ci)
    dev <- round((ci_points[2] - ci_points[1]) * 100, 2)
    paste0("Distance bounds - midpoint ", dev, "%")
  })
  
  output$overlap <- renderText({
    prob_overlap <- calculate_overlap(
      beta_distribution(pars()$alpha1, pars()$beta1),
      beta_distribution(pars()$alpha2, pars()$beta2)
    ) %>% round(2)
    paste0("Probability there is no difference between the groups: ", prob_overlap)
  })
}

